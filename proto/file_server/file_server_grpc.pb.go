// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package file_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServerClient is the client API for FileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileServer_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequset, opts ...grpc.CallOption) (FileServer_DownloadClient, error)
}

type fileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerClient(cc grpc.ClientConnInterface) FileServerClient {
	return &fileServerClient{cc}
}

func (c *fileServerClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileServer_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[0], "/file_server.FileServer/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerUploadClient{stream}
	return x, nil
}

type FileServer_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileServerUploadClient struct {
	grpc.ClientStream
}

func (x *fileServerUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerClient) Download(ctx context.Context, in *DownloadRequset, opts ...grpc.CallOption) (FileServer_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[1], "/file_server.FileServer/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileServer_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileServerDownloadClient struct {
	grpc.ClientStream
}

func (x *fileServerDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServerServer is the server API for FileServer service.
// All implementations must embed UnimplementedFileServerServer
// for forward compatibility
type FileServerServer interface {
	Upload(FileServer_UploadServer) error
	Download(*DownloadRequset, FileServer_DownloadServer) error
	mustEmbedUnimplementedFileServerServer()
}

// UnimplementedFileServerServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerServer struct {
}

func (UnimplementedFileServerServer) Upload(FileServer_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileServerServer) Download(*DownloadRequset, FileServer_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServerServer) mustEmbedUnimplementedFileServerServer() {}

// UnsafeFileServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServer will
// result in compilation errors.
type UnsafeFileServerServer interface {
	mustEmbedUnimplementedFileServerServer()
}

func RegisterFileServerServer(s grpc.ServiceRegistrar, srv FileServerServer) {
	s.RegisterService(&FileServer_ServiceDesc, srv)
}

func _FileServer_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerServer).Upload(&fileServerUploadServer{stream})
}

type FileServer_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type fileServerUploadServer struct {
	grpc.ServerStream
}

func (x *fileServerUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServer_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequset)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServer).Download(m, &fileServerDownloadServer{stream})
}

type FileServer_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileServerDownloadServer struct {
	grpc.ServerStream
}

func (x *fileServerDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileServer_ServiceDesc is the grpc.ServiceDesc for FileServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_server.FileServer",
	HandlerType: (*FileServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileServer_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _FileServer_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/file_server/file_server.proto",
}
